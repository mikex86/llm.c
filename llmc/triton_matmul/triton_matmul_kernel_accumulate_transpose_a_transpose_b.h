/*
 * WARNING: This is an autogenerated file. DO NOT EDIT.
 * This file was generated by generate_kernels.sh which intern launches compile_matmul_kernel.py */
#pragma once

#include <string>

const std::string TRITON_MATMUL_KERNEL_7_SOURCE_PTX = R"(
//
// Generated by LLVM NVPTX Back-End
//

.version 8.4
.target sm_89
.address_size 64

	// .globl	matmul_kernel_accumulate_transpose_a_transpose_b
.extern .shared .align 16 .b8 global_smem[];

.visible .entry matmul_kernel_accumulate_transpose_a_transpose_b(
	.param .u64 matmul_kernel_accumulate_transpose_a_transpose_b_param_0,
	.param .u64 matmul_kernel_accumulate_transpose_a_transpose_b_param_1,
	.param .u64 matmul_kernel_accumulate_transpose_a_transpose_b_param_2,
	.param .u32 matmul_kernel_accumulate_transpose_a_transpose_b_param_3,
	.param .u32 matmul_kernel_accumulate_transpose_a_transpose_b_param_4,
	.param .u32 matmul_kernel_accumulate_transpose_a_transpose_b_param_5,
	.param .u32 matmul_kernel_accumulate_transpose_a_transpose_b_param_6,
	.param .u32 matmul_kernel_accumulate_transpose_a_transpose_b_param_7,
	.param .u32 matmul_kernel_accumulate_transpose_a_transpose_b_param_8
)
.maxntid 256, 1, 1
{
	.reg .pred 	%p<164>;
	.reg .b16 	%rs<643>;
	.reg .b32 	%r<1812>;
	.reg .b64 	%rd<133>;
	.loc	1 41 0
$L__func_begin0:
	.loc	1 41 0

	ld.param.u32 	%r201, [matmul_kernel_accumulate_transpose_a_transpose_b_param_5];
	ld.param.u64 	%rd132, [matmul_kernel_accumulate_transpose_a_transpose_b_param_1];
	ld.param.u64 	%rd63, [matmul_kernel_accumulate_transpose_a_transpose_b_param_0];
$L__tmp0:
	.loc	1 57 24
	// begin inline asm
	mov.u32 %r202, %ctaid.x;
	// end inline asm
	ld.param.u32 	%r395, [matmul_kernel_accumulate_transpose_a_transpose_b_param_3];
$L__tmp1:
	.loc	2 40 22
	add.s32 	%r396, %r395, 127;
	ld.param.u64 	%rd64, [matmul_kernel_accumulate_transpose_a_transpose_b_param_2];
	.loc	2 40 28
	shr.s32 	%r397, %r396, 31;
	shr.u32 	%r398, %r397, 25;
	add.s32 	%r399, %r396, %r398;
	shr.s32 	%r400, %r399, 7;
	ld.param.u32 	%r401, [matmul_kernel_accumulate_transpose_a_transpose_b_param_4];
$L__tmp2:
	.loc	2 40 22
	add.s32 	%r402, %r401, 255;
	.loc	2 40 28
	shr.s32 	%r403, %r402, 31;
	shr.u32 	%r404, %r403, 24;
	add.s32 	%r405, %r402, %r404;
	shr.s32 	%r406, %r405, 8;
$L__tmp3:
	.loc	1 60 38
	shl.b32 	%r408, %r406, 3;
	ld.param.u32 	%r409, [matmul_kernel_accumulate_transpose_a_transpose_b_param_6];
	ld.param.u32 	%r410, [matmul_kernel_accumulate_transpose_a_transpose_b_param_7];
	ld.param.u32 	%r411, [matmul_kernel_accumulate_transpose_a_transpose_b_param_8];
	.loc	1 61 22
	div.s32 	%r412, %r202, %r408;
	.loc	1 62 29
	shl.b32 	%r413, %r412, 3;
	.loc	1 63 35
	sub.s32 	%r414, %r400, %r413;
	.loc	1 63 48
	min.s32 	%r415, %r414, 8;
	.loc	1 64 33
	rem.s32 	%r416, %r202, %r415;
	.loc	1 64 27
	add.s32 	%r417, %r413, %r416;
	mul.lo.s32 	%r418, %r412, %r408;
	sub.s32 	%r419, %r202, %r418;
	.loc	1 65 40
	div.s32 	%r420, %r419, %r415;
	.loc	1 74 23
	shl.b32 	%r421, %r417, 7;
	.loc	1 74 51
	mov.u32 	%r1, %tid.x;
	and.b32  	%r2, %r1, 31;
	shl.b32 	%r422, %r1, 3;
	and.b32  	%r3, %r422, 24;
	and.b32  	%r423, %r422, 120;
	bfe.u32 	%r4, %r1, 5, 3;
	.loc	1 74 38
	or.b32  	%r424, %r421, %r423;
	or.b32  	%r425, %r421, %r4;
	or.b32  	%r426, %r425, 8;
	or.b32  	%r427, %r425, 16;
	or.b32  	%r428, %r425, 24;
	or.b32  	%r429, %r425, 32;
	or.b32  	%r430, %r425, 40;
	or.b32  	%r431, %r425, 48;
	or.b32  	%r432, %r425, 56;
	or.b32  	%r433, %r425, 64;
	or.b32  	%r434, %r425, 72;
	or.b32  	%r435, %r425, 80;
	or.b32  	%r436, %r425, 88;
	or.b32  	%r437, %r425, 96;
	or.b32  	%r438, %r425, 104;
	or.b32  	%r439, %r425, 112;
	or.b32  	%r440, %r425, 120;
	.loc	1 74 68
	rem.s32 	%r441, %r424, %r395;
	.loc	1 75 23
	shl.b32 	%r442, %r420, 8;
	.loc	1 75 51
	and.b32  	%r443, %r422, 248;
	shr.u32 	%r444, %r1, 2;
	bfe.u32 	%r445, %r1, 2, 6;
	or.b32  	%r446, %r445, 64;
	or.b32  	%r447, %r445, 128;
	or.b32  	%r448, %r445, 192;
	.loc	1 75 38
	or.b32  	%r449, %r442, %r443;
	or.b32  	%r450, %r442, %r445;
	or.b32  	%r451, %r442, %r446;
	or.b32  	%r452, %r442, %r447;
	or.b32  	%r453, %r442, %r448;
	.loc	1 75 68
	rem.s32 	%r454, %r450, %r401;
	rem.s32 	%r455, %r451, %r401;
	rem.s32 	%r456, %r452, %r401;
	rem.s32 	%r457, %r453, %r401;
	.loc	1 77 60
	bfe.u32 	%r5, %r1, 4, 4;
	or.b32  	%r458, %r5, 16;
	.loc	1 77 71
	shl.b32 	%r459, %r409, 4;
	.loc	1 77 53
	mad.lo.s32 	%r460, %r5, %r409, %r441;
	add.s32 	%r461, %r460, %r459;
	.loc	1 77 22
	mul.wide.s32 	%rd65, %r460, 2;
	add.s64 	%rd51, %rd63, %rd65;
	mul.wide.s32 	%rd66, %r461, 2;
	add.s64 	%rd52, %rd63, %rd66;
	.loc	1 78 52
	mad.lo.s32 	%r462, %r454, %r410, %r3;
	mad.lo.s32 	%r463, %r455, %r410, %r3;
	mad.lo.s32 	%r464, %r456, %r410, %r3;
	mad.lo.s32 	%r465, %r457, %r410, %r3;
	.loc	1 78 22
	mul.wide.s32 	%rd67, %r462, 2;
	add.s64 	%rd53, %rd132, %rd67;
	mul.wide.s32 	%rd68, %r463, 2;
	add.s64 	%rd54, %rd132, %rd68;
	mul.wide.s32 	%rd69, %r464, 2;
	add.s64 	%rd55, %rd132, %rd69;
	mul.wide.s32 	%rd70, %r465, 2;
	add.s64 	%rd56, %rd132, %rd70;
	.loc	1 82 33
	mul.lo.s32 	%r466, %r425, %r411;
	shl.b32 	%r467, %r411, 3;
	add.s32 	%r468, %r466, %r467;
	add.s32 	%r469, %r468, %r467;
	add.s32 	%r470, %r469, %r467;
	add.s32 	%r471, %r470, %r467;
	add.s32 	%r472, %r471, %r467;
	add.s32 	%r473, %r472, %r467;
	add.s32 	%r474, %r473, %r467;
	add.s32 	%r475, %r474, %r467;
	add.s32 	%r476, %r475, %r467;
	add.s32 	%r477, %r476, %r467;
	add.s32 	%r478, %r477, %r467;
	add.s32 	%r479, %r478, %r467;
	add.s32 	%r480, %r479, %r467;
	add.s32 	%r481, %r480, %r467;
	add.s32 	%r482, %r481, %r467;
	.loc	1 82 21
	mul.wide.s32 	%rd71, %r466, 2;
	add.s64 	%rd72, %rd64, %rd71;
	mul.wide.s32 	%rd73, %r468, 2;
	add.s64 	%rd74, %rd64, %rd73;
	mul.wide.s32 	%rd75, %r469, 2;
	add.s64 	%rd76, %rd64, %rd75;
	mul.wide.s32 	%rd77, %r470, 2;
	add.s64 	%rd78, %rd64, %rd77;
	mul.wide.s32 	%rd79, %r471, 2;
	add.s64 	%rd80, %rd64, %rd79;
	mul.wide.s32 	%rd81, %r472, 2;
	add.s64 	%rd82, %rd64, %rd81;
	mul.wide.s32 	%rd83, %r473, 2;
	add.s64 	%rd84, %rd64, %rd83;
	mul.wide.s32 	%rd85, %r474, 2;
	add.s64 	%rd86, %rd64, %rd85;
	mul.wide.s32 	%rd87, %r475, 2;
	add.s64 	%rd88, %rd64, %rd87;
	mul.wide.s32 	%rd89, %r476, 2;
	add.s64 	%rd90, %rd64, %rd89;
	mul.wide.s32 	%rd91, %r477, 2;
	add.s64 	%rd92, %rd64, %rd91;
	mul.wide.s32 	%rd93, %r478, 2;
	add.s64 	%rd94, %rd64, %rd93;
	mul.wide.s32 	%rd95, %r479, 2;
	add.s64 	%rd96, %rd64, %rd95;
	mul.wide.s32 	%rd97, %r480, 2;
	add.s64 	%rd98, %rd64, %rd97;
	mul.wide.s32 	%rd99, %r481, 2;
	add.s64 	%rd100, %rd64, %rd99;
	mul.wide.s32 	%rd101, %r482, 2;
	add.s64 	%rd102, %rd64, %rd101;
	.loc	1 82 52
	mul.wide.s32 	%rd103, %r449, 2;
	add.s64 	%rd115, %rd72, %rd103;
	add.s64 	%rd116, %rd74, %rd103;
	add.s64 	%rd117, %rd76, %rd103;
	add.s64 	%rd118, %rd78, %rd103;
	add.s64 	%rd119, %rd80, %rd103;
	add.s64 	%rd120, %rd82, %rd103;
	add.s64 	%rd121, %rd84, %rd103;
	add.s64 	%rd122, %rd86, %rd103;
	add.s64 	%rd123, %rd88, %rd103;
	add.s64 	%rd124, %rd90, %rd103;
	add.s64 	%rd125, %rd92, %rd103;
	add.s64 	%rd126, %rd94, %rd103;
	add.s64 	%rd127, %rd96, %rd103;
	add.s64 	%rd128, %rd98, %rd103;
	add.s64 	%rd129, %rd100, %rd103;
	add.s64 	%rd130, %rd102, %rd103;
	.loc	1 83 33
	setp.lt.s32 	%p109, %r425, %r395;
	setp.lt.s32 	%p110, %r426, %r395;
	setp.lt.s32 	%p111, %r427, %r395;
	setp.lt.s32 	%p112, %r428, %r395;
	setp.lt.s32 	%p113, %r429, %r395;
	setp.lt.s32 	%p114, %r430, %r395;
	setp.lt.s32 	%p115, %r431, %r395;
	setp.lt.s32 	%p116, %r432, %r395;
	setp.lt.s32 	%p117, %r433, %r395;
	setp.lt.s32 	%p118, %r434, %r395;
	setp.lt.s32 	%p119, %r435, %r395;
	setp.lt.s32 	%p120, %r436, %r395;
	setp.lt.s32 	%p121, %r437, %r395;
	setp.lt.s32 	%p122, %r438, %r395;
	setp.lt.s32 	%p123, %r439, %r395;
	setp.lt.s32 	%p124, %r440, %r395;
	.loc	1 83 58
	setp.lt.s32 	%p125, %r449, %r401;
	.loc	1 83 39
	and.pred  	%p148, %p109, %p125;
	and.pred  	%p149, %p110, %p125;
	and.pred  	%p150, %p111, %p125;
	and.pred  	%p151, %p112, %p125;
	and.pred  	%p152, %p113, %p125;
	and.pred  	%p153, %p114, %p125;
	and.pred  	%p154, %p115, %p125;
	and.pred  	%p155, %p116, %p125;
	and.pred  	%p156, %p117, %p125;
	and.pred  	%p157, %p118, %p125;
	and.pred  	%p158, %p119, %p125;
	and.pred  	%p159, %p120, %p125;
	and.pred  	%p160, %p121, %p125;
	and.pred  	%p161, %p122, %p125;
	and.pred  	%p162, %p123, %p125;
	and.pred  	%p163, %p124, %p125;
	mov.b32 	%r1809, 0;
	.loc	1 89 30
	// begin inline asm
	mov.u32 %r203, 0x0;
	mov.u32 %r204, 0x0;
	mov.u32 %r205, 0x0;
	mov.u32 %r206, 0x0;
	@%p148 ld.global.v4.b32 { %r203, %r204, %r205, %r206 }, [ %rd115 + 0 ];
	@!%p148 mov.u32 %r203, %r1809;
	@!%p148 mov.u32 %r204, %r1809;
	@!%p148 mov.u32 %r205, %r1809;
	@!%p148 mov.u32 %r206, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r211, 0x0;
	mov.u32 %r212, 0x0;
	mov.u32 %r213, 0x0;
	mov.u32 %r214, 0x0;
	@%p149 ld.global.v4.b32 { %r211, %r212, %r213, %r214 }, [ %rd116 + 0 ];
	@!%p149 mov.u32 %r211, %r1809;
	@!%p149 mov.u32 %r212, %r1809;
	@!%p149 mov.u32 %r213, %r1809;
	@!%p149 mov.u32 %r214, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r219, 0x0;
	mov.u32 %r220, 0x0;
	mov.u32 %r221, 0x0;
	mov.u32 %r222, 0x0;
	@%p150 ld.global.v4.b32 { %r219, %r220, %r221, %r222 }, [ %rd117 + 0 ];
	@!%p150 mov.u32 %r219, %r1809;
	@!%p150 mov.u32 %r220, %r1809;
	@!%p150 mov.u32 %r221, %r1809;
	@!%p150 mov.u32 %r222, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r227, 0x0;
	mov.u32 %r228, 0x0;
	mov.u32 %r229, 0x0;
	mov.u32 %r230, 0x0;
	@%p151 ld.global.v4.b32 { %r227, %r228, %r229, %r230 }, [ %rd118 + 0 ];
	@!%p151 mov.u32 %r227, %r1809;
	@!%p151 mov.u32 %r228, %r1809;
	@!%p151 mov.u32 %r229, %r1809;
	@!%p151 mov.u32 %r230, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r235, 0x0;
	mov.u32 %r236, 0x0;
	mov.u32 %r237, 0x0;
	mov.u32 %r238, 0x0;
	@%p152 ld.global.v4.b32 { %r235, %r236, %r237, %r238 }, [ %rd119 + 0 ];
	@!%p152 mov.u32 %r235, %r1809;
	@!%p152 mov.u32 %r236, %r1809;
	@!%p152 mov.u32 %r237, %r1809;
	@!%p152 mov.u32 %r238, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r243, 0x0;
	mov.u32 %r244, 0x0;
	mov.u32 %r245, 0x0;
	mov.u32 %r246, 0x0;
	@%p153 ld.global.v4.b32 { %r243, %r244, %r245, %r246 }, [ %rd120 + 0 ];
	@!%p153 mov.u32 %r243, %r1809;
	@!%p153 mov.u32 %r244, %r1809;
	@!%p153 mov.u32 %r245, %r1809;
	@!%p153 mov.u32 %r246, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r251, 0x0;
	mov.u32 %r252, 0x0;
	mov.u32 %r253, 0x0;
	mov.u32 %r254, 0x0;
	@%p154 ld.global.v4.b32 { %r251, %r252, %r253, %r254 }, [ %rd121 + 0 ];
	@!%p154 mov.u32 %r251, %r1809;
	@!%p154 mov.u32 %r252, %r1809;
	@!%p154 mov.u32 %r253, %r1809;
	@!%p154 mov.u32 %r254, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r259, 0x0;
	mov.u32 %r260, 0x0;
	mov.u32 %r261, 0x0;
	mov.u32 %r262, 0x0;
	@%p155 ld.global.v4.b32 { %r259, %r260, %r261, %r262 }, [ %rd122 + 0 ];
	@!%p155 mov.u32 %r259, %r1809;
	@!%p155 mov.u32 %r260, %r1809;
	@!%p155 mov.u32 %r261, %r1809;
	@!%p155 mov.u32 %r262, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r267, 0x0;
	mov.u32 %r268, 0x0;
	mov.u32 %r269, 0x0;
	mov.u32 %r270, 0x0;
	@%p156 ld.global.v4.b32 { %r267, %r268, %r269, %r270 }, [ %rd123 + 0 ];
	@!%p156 mov.u32 %r267, %r1809;
	@!%p156 mov.u32 %r268, %r1809;
	@!%p156 mov.u32 %r269, %r1809;
	@!%p156 mov.u32 %r270, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r275, 0x0;
	mov.u32 %r276, 0x0;
	mov.u32 %r277, 0x0;
	mov.u32 %r278, 0x0;
	@%p157 ld.global.v4.b32 { %r275, %r276, %r277, %r278 }, [ %rd124 + 0 ];
	@!%p157 mov.u32 %r275, %r1809;
	@!%p157 mov.u32 %r276, %r1809;
	@!%p157 mov.u32 %r277, %r1809;
	@!%p157 mov.u32 %r278, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r283, 0x0;
	mov.u32 %r284, 0x0;
	mov.u32 %r285, 0x0;
	mov.u32 %r286, 0x0;
	@%p158 ld.global.v4.b32 { %r283, %r284, %r285, %r286 }, [ %rd125 + 0 ];
	@!%p158 mov.u32 %r283, %r1809;
	@!%p158 mov.u32 %r284, %r1809;
	@!%p158 mov.u32 %r285, %r1809;
	@!%p158 mov.u32 %r286, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r291, 0x0;
	mov.u32 %r292, 0x0;
	mov.u32 %r293, 0x0;
	mov.u32 %r294, 0x0;
	@%p159 ld.global.v4.b32 { %r291, %r292, %r293, %r294 }, [ %rd126 + 0 ];
	@!%p159 mov.u32 %r291, %r1809;
	@!%p159 mov.u32 %r292, %r1809;
	@!%p159 mov.u32 %r293, %r1809;
	@!%p159 mov.u32 %r294, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r299, 0x0;
	mov.u32 %r300, 0x0;
	mov.u32 %r301, 0x0;
	mov.u32 %r302, 0x0;
	@%p160 ld.global.v4.b32 { %r299, %r300, %r301, %r302 }, [ %rd127 + 0 ];
	@!%p160 mov.u32 %r299, %r1809;
	@!%p160 mov.u32 %r300, %r1809;
	@!%p160 mov.u32 %r301, %r1809;
	@!%p160 mov.u32 %r302, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r307, 0x0;
	mov.u32 %r308, 0x0;
	mov.u32 %r309, 0x0;
	mov.u32 %r310, 0x0;
	@%p161 ld.global.v4.b32 { %r307, %r308, %r309, %r310 }, [ %rd128 + 0 ];
	@!%p161 mov.u32 %r307, %r1809;
	@!%p161 mov.u32 %r308, %r1809;
	@!%p161 mov.u32 %r309, %r1809;
	@!%p161 mov.u32 %r310, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r315, 0x0;
	mov.u32 %r316, 0x0;
	mov.u32 %r317, 0x0;
	mov.u32 %r318, 0x0;
	@%p162 ld.global.v4.b32 { %r315, %r316, %r317, %r318 }, [ %rd129 + 0 ];
	@!%p162 mov.u32 %r315, %r1809;
	@!%p162 mov.u32 %r316, %r1809;
	@!%p162 mov.u32 %r317, %r1809;
	@!%p162 mov.u32 %r318, %r1809;
	// end inline asm
	// begin inline asm
	mov.u32 %r323, 0x0;
	mov.u32 %r324, 0x0;
	mov.u32 %r325, 0x0;
	mov.u32 %r326, 0x0;
	@%p163 ld.global.v4.b32 { %r323, %r324, %r325, %r326 }, [ %rd130 + 0 ];
	@!%p163 mov.u32 %r323, %r1809;
	@!%p163 mov.u32 %r324, %r1809;
	@!%p163 mov.u32 %r325, %r1809;
	@!%p163 mov.u32 %r326, %r1809;
	// end inline asm
$L__tmp4:
	.loc	2 40 22
	add.s32 	%r483, %r201, 31;
$L__tmp5:
	.loc	1 102 33
	shl.b32 	%r487, %r409, 5;
	.loc	1 93 22
	setp.lt.s32 	%p126, %r483, 32;
	setp.gt.s32 	%p127, %r483, 31;
	.loc	1 96 72
	setp.lt.s32 	%p128, %r5, %r201;
	setp.lt.s32 	%p129, %r458, %r201;
	.loc	1 96 20
	shr.u32 	%r488, %r1, 1;
	and.b32  	%r489, %r488, 56;
	xor.b32  	%r490, %r489, %r423;
	shl.b32 	%r491, %r5, 7;
	or.b32  	%r71, %r490, %r491;
	shl.b32 	%r492, %r71, 1;
	mov.u32 	%r493, global_smem;
	add.s32 	%r331, %r493, %r492;
	shl.b32 	%r494, %r458, 7;
	or.b32  	%r72, %r494, %r490;
	shl.b32 	%r495, %r72, 1;
	add.s32 	%r333, %r493, %r495;
	selp.b32 	%r496, 16, 0, %p127;
	selp.b32 	%r332, %r496, 0, %p128;
	mov.pred 	%p97, -1;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r331 + 0 ], [ %rd51 + 0 ], 0x10, %r332;
	// end inline asm
	selp.b32 	%r334, %r496, 0, %p129;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r333 + 0 ], [ %rd52 + 0 ], 0x10, %r334;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 97 72
	setp.lt.s32 	%p130, %r3, %r201;
	.loc	1 97 20
	xor.b32  	%r497, %r422, %r1;
	and.b32  	%r498, %r497, 24;
	shl.b32 	%r499, %r445, 5;
	or.b32  	%r73, %r499, %r498;
	shl.b32 	%r500, %r73, 1;
	add.s32 	%r501, %r493, 16384;
	add.s32 	%r335, %r501, %r500;
	shl.b32 	%r502, %r446, 5;
	or.b32  	%r74, %r502, %r498;
	shl.b32 	%r503, %r74, 1;
	add.s32 	%r337, %r501, %r503;
	shl.b32 	%r504, %r447, 5;
	or.b32  	%r75, %r504, %r498;
	shl.b32 	%r505, %r75, 1;
	add.s32 	%r339, %r501, %r505;
	shl.b32 	%r506, %r448, 5;
	or.b32  	%r76, %r506, %r498;
	shl.b32 	%r507, %r76, 1;
	add.s32 	%r341, %r501, %r507;
	selp.b32 	%r338, %r496, 0, %p130;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r335 + 0 ], [ %rd53 + 0 ], 0x10, %r338;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r337 + 0 ], [ %rd54 + 0 ], 0x10, %r338;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r339 + 0 ], [ %rd55 + 0 ], 0x10, %r338;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r341 + 0 ], [ %rd56 + 0 ], 0x10, %r338;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 93 22
	setp.gt.s32 	%p131, %r483, 63;
	.loc	1 102 18
	mul.wide.s32 	%rd104, %r487, 2;
	add.s64 	%rd57, %rd51, %rd104;
	add.s64 	%rd58, %rd52, %rd104;
	.loc	1 103 18
	add.s64 	%rd59, %rd53, 64;
	add.s64 	%rd60, %rd54, 64;
	add.s64 	%rd61, %rd55, 64;
	add.s64 	%rd62, %rd56, 64;
	.loc	1 96 53
	or.b32  	%r508, %r5, 32;
	or.b32  	%r509, %r5, 48;
	.loc	1 96 72
	setp.lt.s32 	%p132, %r508, %r201;
	setp.lt.s32 	%p133, %r509, %r201;
	.loc	1 96 20
	bar.sync 	0;
	add.s32 	%r510, %r493, 8192;
	add.s32 	%r343, %r510, %r492;
	add.s32 	%r345, %r510, %r495;
	selp.b32 	%r511, 16, 0, %p131;
	selp.b32 	%r344, %r511, 0, %p132;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r343 + 0 ], [ %rd57 + 0 ], 0x10, %r344;
	// end inline asm
	selp.b32 	%r346, %r511, 0, %p133;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r345 + 0 ], [ %rd58 + 0 ], 0x10, %r346;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 97 53
	or.b32  	%r512, %r3, 32;
	.loc	1 97 72
	setp.lt.s32 	%p134, %r512, %r201;
	.loc	1 97 20
	add.s32 	%r513, %r493, 32768;
	add.s32 	%r347, %r513, %r500;
	add.s32 	%r349, %r513, %r503;
	add.s32 	%r351, %r513, %r505;
	add.s32 	%r353, %r513, %r507;
	selp.b32 	%r350, %r511, 0, %p134;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r347 + 0 ], [ %rd59 + 0 ], 0x10, %r350;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r349 + 0 ], [ %rd60 + 0 ], 0x10, %r350;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r351 + 0 ], [ %rd61 + 0 ], 0x10, %r350;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r353 + 0 ], [ %rd62 + 0 ], 0x10, %r350;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 96 20
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	bfe.u32 	%r77, %r1, 7, 1;
	and.b32  	%r514, %r1, 7;
	bfe.u32 	%r78, %r1, 3, 1;
	bfe.u32 	%r515, %r1, 4, 1;
	shl.b32 	%r516, %r77, 1;
	or.b32  	%r517, %r516, %r78;
	xor.b32  	%r518, %r517, %r514;
	shl.b32 	%r519, %r518, 3;
	shl.b32 	%r520, %r514, 7;
	shl.b32 	%r521, %r515, 10;
	or.b32  	%r522, %r521, %r520;
	or.b32  	%r79, %r519, %r522;
	shl.b32 	%r523, %r79, 1;
	add.s32 	%r359, %r493, %r523;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1803, %r1804, %r1805, %r1806 }, [ %r359 + 0 ];
	// end inline asm
	or.b32  	%r524, %r517, 4;
	xor.b32  	%r525, %r524, %r514;
	shl.b32 	%r526, %r525, 3;
	or.b32  	%r84, %r526, %r522;
	shl.b32 	%r527, %r84, 1;
	add.s32 	%r364, %r493, %r527;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1799, %r1800, %r1801, %r1802 }, [ %r364 + 0 ];
	// end inline asm
	or.b32  	%r528, %r517, 8;
	xor.b32  	%r529, %r528, %r514;
	shl.b32 	%r530, %r529, 3;
	or.b32  	%r89, %r530, %r522;
	shl.b32 	%r531, %r89, 1;
	add.s32 	%r369, %r493, %r531;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1795, %r1796, %r1797, %r1798 }, [ %r369 + 0 ];
	// end inline asm
	or.b32  	%r532, %r517, 12;
	xor.b32  	%r533, %r532, %r514;
	shl.b32 	%r534, %r533, 3;
	or.b32  	%r94, %r534, %r522;
	shl.b32 	%r535, %r94, 1;
	add.s32 	%r374, %r493, %r535;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1791, %r1792, %r1793, %r1794 }, [ %r374 + 0 ];
	// end inline asm
	.loc	1 97 20
	bfe.u32 	%r99, %r1, 1, 2;
	shl.b32 	%r536, %r515, 5;
	and.b32  	%r100, %r444, 24;
	or.b32  	%r537, %r536, %r100;
	or.b32  	%r538, %r537, %r514;
	xor.b32  	%r539, %r78, %r99;
	shl.b32 	%r540, %r539, 3;
	shl.b32 	%r101, %r538, 5;
	or.b32  	%r102, %r101, %r540;
	shl.b32 	%r541, %r102, 1;
	add.s32 	%r379, %r501, %r541;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1787, %r1788, %r1789, %r1790 }, [ %r379 + 0 ];
	// end inline asm
	add.s32 	%r384, %r379, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1783, %r1784, %r1785, %r1786 }, [ %r384 + 0 ];
	// end inline asm
	add.s32 	%r389, %r379, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1779, %r1780, %r1781, %r1782 }, [ %r389 + 0 ];
	// end inline asm
	add.s32 	%r394, %r379, 12288;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1775, %r1776, %r1777, %r1778 }, [ %r394 + 0 ];
	// end inline asm
	mov.b16 	%rs515, 0x0000;
	mov.u16 	%rs516, %rs515;
	mov.u16 	%rs517, %rs515;
	mov.u16 	%rs518, %rs515;
	mov.u16 	%rs519, %rs515;
	mov.u16 	%rs520, %rs515;
	mov.u16 	%rs521, %rs515;
	mov.u16 	%rs522, %rs515;
	mov.u16 	%rs523, %rs515;
	mov.u16 	%rs524, %rs515;
	mov.u16 	%rs525, %rs515;
	mov.u16 	%rs526, %rs515;
	mov.u16 	%rs527, %rs515;
	mov.u16 	%rs528, %rs515;
	mov.u16 	%rs529, %rs515;
	mov.u16 	%rs530, %rs515;
	mov.u16 	%rs531, %rs515;
	mov.u16 	%rs532, %rs515;
	mov.u16 	%rs533, %rs515;
	mov.u16 	%rs534, %rs515;
	mov.u16 	%rs535, %rs515;
	mov.u16 	%rs536, %rs515;
	mov.u16 	%rs537, %rs515;
	mov.u16 	%rs538, %rs515;
	mov.u16 	%rs539, %rs515;
	mov.u16 	%rs540, %rs515;
	mov.u16 	%rs541, %rs515;
	mov.u16 	%rs542, %rs515;
	mov.u16 	%rs543, %rs515;
	mov.u16 	%rs544, %rs515;
	mov.u16 	%rs545, %rs515;
	mov.u16 	%rs546, %rs515;
	mov.u16 	%rs547, %rs515;
	mov.u16 	%rs548, %rs515;
	mov.u16 	%rs549, %rs515;
	mov.u16 	%rs550, %rs515;
	mov.u16 	%rs551, %rs515;
	mov.u16 	%rs552, %rs515;
	mov.u16 	%rs553, %rs515;
	mov.u16 	%rs554, %rs515;
	mov.u16 	%rs555, %rs515;
	mov.u16 	%rs556, %rs515;
	mov.u16 	%rs557, %rs515;
	mov.u16 	%rs558, %rs515;
	mov.u16 	%rs559, %rs515;
	mov.u16 	%rs560, %rs515;
	mov.u16 	%rs561, %rs515;
	mov.u16 	%rs562, %rs515;
	mov.u16 	%rs563, %rs515;
	mov.u16 	%rs564, %rs515;
	mov.u16 	%rs565, %rs515;
	mov.u16 	%rs566, %rs515;
	mov.u16 	%rs567, %rs515;
	mov.u16 	%rs568, %rs515;
	mov.u16 	%rs569, %rs515;
	mov.u16 	%rs570, %rs515;
	mov.u16 	%rs571, %rs515;
	mov.u16 	%rs572, %rs515;
	mov.u16 	%rs573, %rs515;
	mov.u16 	%rs574, %rs515;
	mov.u16 	%rs575, %rs515;
	mov.u16 	%rs576, %rs515;
	mov.u16 	%rs577, %rs515;
	mov.u16 	%rs578, %rs515;
	mov.u16 	%rs579, %rs515;
	mov.u16 	%rs580, %rs515;
	mov.u16 	%rs581, %rs515;
	mov.u16 	%rs582, %rs515;
	mov.u16 	%rs583, %rs515;
	mov.u16 	%rs584, %rs515;
	mov.u16 	%rs585, %rs515;
	mov.u16 	%rs586, %rs515;
	mov.u16 	%rs587, %rs515;
	mov.u16 	%rs588, %rs515;
	mov.u16 	%rs589, %rs515;
	mov.u16 	%rs590, %rs515;
	mov.u16 	%rs591, %rs515;
	mov.u16 	%rs592, %rs515;
	mov.u16 	%rs593, %rs515;
	mov.u16 	%rs594, %rs515;
	mov.u16 	%rs595, %rs515;
	mov.u16 	%rs596, %rs515;
	mov.u16 	%rs597, %rs515;
	mov.u16 	%rs598, %rs515;
	mov.u16 	%rs599, %rs515;
	mov.u16 	%rs600, %rs515;
	mov.u16 	%rs601, %rs515;
	mov.u16 	%rs602, %rs515;
	mov.u16 	%rs603, %rs515;
	mov.u16 	%rs604, %rs515;
	mov.u16 	%rs605, %rs515;
	mov.u16 	%rs606, %rs515;
	mov.u16 	%rs607, %rs515;
	mov.u16 	%rs608, %rs515;
	mov.u16 	%rs609, %rs515;
	mov.u16 	%rs610, %rs515;
	mov.u16 	%rs611, %rs515;
	mov.u16 	%rs612, %rs515;
	mov.u16 	%rs613, %rs515;
	mov.u16 	%rs614, %rs515;
	mov.u16 	%rs615, %rs515;
	mov.u16 	%rs616, %rs515;
	mov.u16 	%rs617, %rs515;
	mov.u16 	%rs618, %rs515;
	mov.u16 	%rs619, %rs515;
	mov.u16 	%rs620, %rs515;
	mov.u16 	%rs621, %rs515;
	mov.u16 	%rs622, %rs515;
	mov.u16 	%rs623, %rs515;
	mov.u16 	%rs624, %rs515;
	mov.u16 	%rs625, %rs515;
	mov.u16 	%rs626, %rs515;
	mov.u16 	%rs627, %rs515;
	mov.u16 	%rs628, %rs515;
	mov.u16 	%rs629, %rs515;
	mov.u16 	%rs630, %rs515;
	mov.u16 	%rs631, %rs515;
	mov.u16 	%rs632, %rs515;
	mov.u16 	%rs633, %rs515;
	mov.u16 	%rs634, %rs515;
	mov.u16 	%rs635, %rs515;
	mov.u16 	%rs636, %rs515;
	mov.u16 	%rs637, %rs515;
	mov.u16 	%rs638, %rs515;
	mov.u16 	%rs639, %rs515;
	mov.u16 	%rs640, %rs515;
	mov.u16 	%rs641, %rs515;
	mov.u16 	%rs642, %rs515;
	.loc	1 93 22
	@%p126 bra 	$L__BB0_3;
	.loc	1 0 22
	cvt.s64.s32 	%rd3, %r462;
	cvt.s64.s32 	%rd4, %r463;
	cvt.s64.s32 	%rd5, %r464;
	cvt.s64.s32 	%rd6, %r465;
	shr.s32 	%r484, %r483, 31;
	shr.u32 	%r485, %r484, 27;
	add.s32 	%r486, %r483, %r485;
	shr.s32 	%r70, %r486, 5;
	cvt.s64.s32 	%rd23, %r487;
	add.s32 	%r119, %r70, -2;
	or.b32  	%r546, %r78, 2;
	xor.b32  	%r547, %r546, %r99;
	shl.b32 	%r548, %r547, 3;
	or.b32  	%r120, %r101, %r548;
	.loc	1 93 22
	shl.b64 	%rd105, %rd6, 1;
	add.s64 	%rd24, %rd105, 128;
	shl.b64 	%rd106, %rd5, 1;
	add.s64 	%rd25, %rd106, 128;
	shl.b64 	%rd107, %rd4, 1;
	add.s64 	%rd26, %rd107, 128;
	shl.b64 	%rd108, %rd3, 1;
	add.s64 	%rd27, %rd108, 128;
	shl.b64 	%rd131, %rd23, 2;
	shl.b64 	%rd29, %rd23, 1;
	or.b32  	%r1774, %r3, 64;
	or.b32  	%r1773, %r5, 80;
	mov.b16 	%rs515, 0x0000;
	mov.b32 	%r1810, 1;
	shl.b32 	%r1289, %r120, 1;
	mov.u32 	%r1807, %r501;
	mov.u32 	%r1808, %r493;
	mov.u16 	%rs516, %rs515;
	mov.u16 	%rs517, %rs515;
	mov.u16 	%rs518, %rs515;
	mov.u16 	%rs519, %rs515;
	mov.u16 	%rs520, %rs515;
	mov.u16 	%rs521, %rs515;
	mov.u16 	%rs522, %rs515;
	mov.u16 	%rs523, %rs515;
	mov.u16 	%rs524, %rs515;
	mov.u16 	%rs525, %rs515;
	mov.u16 	%rs526, %rs515;
	mov.u16 	%rs527, %rs515;
	mov.u16 	%rs528, %rs515;
	mov.u16 	%rs529, %rs515;
	mov.u16 	%rs530, %rs515;
	mov.u16 	%rs531, %rs515;
	mov.u16 	%rs532, %rs515;
	mov.u16 	%rs533, %rs515;
	mov.u16 	%rs534, %rs515;
	mov.u16 	%rs535, %rs515;
	mov.u16 	%rs536, %rs515;
	mov.u16 	%rs537, %rs515;
	mov.u16 	%rs538, %rs515;
	mov.u16 	%rs539, %rs515;
	mov.u16 	%rs540, %rs515;
	mov.u16 	%rs541, %rs515;
	mov.u16 	%rs542, %rs515;
	mov.u16 	%rs543, %rs515;
	mov.u16 	%rs544, %rs515;
	mov.u16 	%rs545, %rs515;
	mov.u16 	%rs546, %rs515;
	mov.u16 	%rs547, %rs515;
	mov.u16 	%rs548, %rs515;
	mov.u16 	%rs549, %rs515;
	mov.u16 	%rs550, %rs515;
	mov.u16 	%rs551, %rs515;
	mov.u16 	%rs552, %rs515;
	mov.u16 	%rs553, %rs515;
	mov.u16 	%rs554, %rs515;
	mov.u16 	%rs555, %rs515;
	mov.u16 	%rs556, %rs515;
	mov.u16 	%rs557, %rs515;
	mov.u16 	%rs558, %rs515;
	mov.u16 	%rs559, %rs515;
	mov.u16 	%rs560, %rs515;
	mov.u16 	%rs561, %rs515;
	mov.u16 	%rs562, %rs515;
	mov.u16 	%rs563, %rs515;
	mov.u16 	%rs564, %rs515;
	mov.u16 	%rs565, %rs515;
	mov.u16 	%rs566, %rs515;
	mov.u16 	%rs567, %rs515;
	mov.u16 	%rs568, %rs515;
	mov.u16 	%rs569, %rs515;
	mov.u16 	%rs570, %rs515;
	mov.u16 	%rs571, %rs515;
	mov.u16 	%rs572, %rs515;
	mov.u16 	%rs573, %rs515;
	mov.u16 	%rs574, %rs515;
	mov.u16 	%rs575, %rs515;
	mov.u16 	%rs576, %rs515;
	mov.u16 	%rs577, %rs515;
	mov.u16 	%rs578, %rs515;
	mov.u16 	%rs579, %rs515;
	mov.u16 	%rs580, %rs515;
	mov.u16 	%rs581, %rs515;
	mov.u16 	%rs582, %rs515;
	mov.u16 	%rs583, %rs515;
	mov.u16 	%rs584, %rs515;
	mov.u16 	%rs585, %rs515;
	mov.u16 	%rs586, %rs515;
	mov.u16 	%rs587, %rs515;
	mov.u16 	%rs588, %rs515;
	mov.u16 	%rs589, %rs515;
	mov.u16 	%rs590, %rs515;
	mov.u16 	%rs591, %rs515;
	mov.u16 	%rs592, %rs515;
	mov.u16 	%rs593, %rs515;
	mov.u16 	%rs594, %rs515;
	mov.u16 	%rs595, %rs515;
	mov.u16 	%rs596, %rs515;
	mov.u16 	%rs597, %rs515;
	mov.u16 	%rs598, %rs515;
	mov.u16 	%rs599, %rs515;
	mov.u16 	%rs600, %rs515;
	mov.u16 	%rs601, %rs515;
	mov.u16 	%rs602, %rs515;
	mov.u16 	%rs603, %rs515;
	mov.u16 	%rs604, %rs515;
	mov.u16 	%rs605, %rs515;
	mov.u16 	%rs606, %rs515;
	mov.u16 	%rs607, %rs515;
	mov.u16 	%rs608, %rs515;
	mov.u16 	%rs609, %rs515;
	mov.u16 	%rs610, %rs515;
	mov.u16 	%rs611, %rs515;
	mov.u16 	%rs612, %rs515;
	mov.u16 	%rs613, %rs515;
	mov.u16 	%rs614, %rs515;
	mov.u16 	%rs615, %rs515;
	mov.u16 	%rs616, %rs515;
	mov.u16 	%rs617, %rs515;
	mov.u16 	%rs618, %rs515;
	mov.u16 	%rs619, %rs515;
	mov.u16 	%rs620, %rs515;
	mov.u16 	%rs621, %rs515;
	mov.u16 	%rs622, %rs515;
	mov.u16 	%rs623, %rs515;
	mov.u16 	%rs624, %rs515;
	mov.u16 	%rs625, %rs515;
	mov.u16 	%rs626, %rs515;
	mov.u16 	%rs627, %rs515;
	mov.u16 	%rs628, %rs515;
	mov.u16 	%rs629, %rs515;
	mov.u16 	%rs630, %rs515;
	mov.u16 	%rs631, %rs515;
	mov.u16 	%rs632, %rs515;
	mov.u16 	%rs633, %rs515;
	mov.u16 	%rs634, %rs515;
	mov.u16 	%rs635, %rs515;
	mov.u16 	%rs636, %rs515;
	mov.u16 	%rs637, %rs515;
	mov.u16 	%rs638, %rs515;
	mov.u16 	%rs639, %rs515;
	mov.u16 	%rs640, %rs515;
	mov.u16 	%rs641, %rs515;
	mov.u16 	%rs642, %rs515;
	mov.u32 	%r1811, %r1809;
$L__BB0_2:
	setp.lt.s32 	%p141, %r1811, %r119;
	.loc	1 96 20
	add.s32 	%r1282, %r1808, %r523;
	add.s32 	%r553, %r1282, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r965, %r966, %r967, %r968 }, [ %r553 + 0 ];
	// end inline asm
	add.s32 	%r1284, %r1808, %r527;
	add.s32 	%r558, %r1284, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1045, %r1046, %r1047, %r1048 }, [ %r558 + 0 ];
	// end inline asm
	add.s32 	%r1286, %r1808, %r531;
	add.s32 	%r563, %r1286, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1125, %r1126, %r1127, %r1128 }, [ %r563 + 0 ];
	// end inline asm
	add.s32 	%r1288, %r1808, %r535;
	add.s32 	%r568, %r1288, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1205, %r1206, %r1207, %r1208 }, [ %r568 + 0 ];
	// end inline asm
	.loc	1 97 20
	add.s32 	%r573, %r1807, %r1289;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r969, %r970, %r979, %r980 }, [ %r573 + 0 ];
	// end inline asm
	add.s32 	%r578, %r573, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r989, %r990, %r999, %r1000 }, [ %r578 + 0 ];
	// end inline asm
	add.s32 	%r583, %r573, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1009, %r1010, %r1019, %r1020 }, [ %r583 + 0 ];
	// end inline asm
	add.s32 	%r588, %r573, 12288;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1029, %r1030, %r1039, %r1040 }, [ %r588 + 0 ];
	// end inline asm
	.loc	1 100 35
	mov.b32 	%r961, {%rs515, %rs516};
	mov.b32 	%r962, {%rs517, %rs518};
	mov.b32 	%r971, {%rs519, %rs520};
	mov.b32 	%r972, {%rs521, %rs522};
	mov.b32 	%r981, {%rs523, %rs524};
	mov.b32 	%r982, {%rs525, %rs526};
	mov.b32 	%r991, {%rs527, %rs528};
	mov.b32 	%r992, {%rs529, %rs530};
	mov.b32 	%r1001, {%rs531, %rs532};
	mov.b32 	%r1002, {%rs533, %rs534};
	mov.b32 	%r1011, {%rs535, %rs536};
	mov.b32 	%r1012, {%rs537, %rs538};
	mov.b32 	%r1021, {%rs539, %rs540};
	mov.b32 	%r1022, {%rs541, %rs542};
	mov.b32 	%r1031, {%rs543, %rs544};
	mov.b32 	%r1032, {%rs545, %rs546};
	mov.b32 	%r1041, {%rs547, %rs548};
	mov.b32 	%r1042, {%rs549, %rs550};
	mov.b32 	%r1051, {%rs551, %rs552};
	mov.b32 	%r1052, {%rs553, %rs554};
	mov.b32 	%r1061, {%rs555, %rs556};
	mov.b32 	%r1062, {%rs557, %rs558};
	mov.b32 	%r1071, {%rs559, %rs560};
	mov.b32 	%r1072, {%rs561, %rs562};
	mov.b32 	%r1081, {%rs563, %rs564};
	mov.b32 	%r1082, {%rs565, %rs566};
	mov.b32 	%r1091, {%rs567, %rs568};
	mov.b32 	%r1092, {%rs569, %rs570};
	mov.b32 	%r1101, {%rs571, %rs572};
	mov.b32 	%r1102, {%rs573, %rs574};
	mov.b32 	%r1111, {%rs575, %rs576};
	mov.b32 	%r1112, {%rs577, %rs578};
	mov.b32 	%r1121, {%rs579, %rs580};
	mov.b32 	%r1122, {%rs581, %rs582};
	mov.b32 	%r1131, {%rs583, %rs584};
	mov.b32 	%r1132, {%rs585, %rs586};
	mov.b32 	%r1141, {%rs587, %rs588};
	mov.b32 	%r1142, {%rs589, %rs590};
	mov.b32 	%r1151, {%rs591, %rs592};
	mov.b32 	%r1152, {%rs593, %rs594};
	mov.b32 	%r1161, {%rs595, %rs596};
	mov.b32 	%r1162, {%rs597, %rs598};
	mov.b32 	%r1171, {%rs599, %rs600};
	mov.b32 	%r1172, {%rs601, %rs602};
	mov.b32 	%r1181, {%rs603, %rs604};
	mov.b32 	%r1182, {%rs605, %rs606};
	mov.b32 	%r1191, {%rs607, %rs608};
	mov.b32 	%r1192, {%rs609, %rs610};
	mov.b32 	%r1201, {%rs611, %rs612};
	mov.b32 	%r1202, {%rs613, %rs614};
	mov.b32 	%r1211, {%rs615, %rs616};
	mov.b32 	%r1212, {%rs617, %rs618};
	mov.b32 	%r1221, {%rs619, %rs620};
	mov.b32 	%r1222, {%rs621, %rs622};
	mov.b32 	%r1231, {%rs623, %rs624};
	mov.b32 	%r1232, {%rs625, %rs626};
	mov.b32 	%r1241, {%rs627, %rs628};
	mov.b32 	%r1242, {%rs629, %rs630};
	mov.b32 	%r1251, {%rs631, %rs632};
	mov.b32 	%r1252, {%rs633, %rs634};
	mov.b32 	%r1261, {%rs635, %rs636};
	mov.b32 	%r1262, {%rs637, %rs638};
	mov.b32 	%r1271, {%rs639, %rs640};
	mov.b32 	%r1272, {%rs641, %rs642};
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r961, %r962 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1787, %r1788 }, { %r961, %r962 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r971, %r972 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1789, %r1790 }, { %r971, %r972 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r981, %r982 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1783, %r1784 }, { %r981, %r982 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r991, %r992 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1785, %r1786 }, { %r991, %r992 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1001, %r1002 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1779, %r1780 }, { %r1001, %r1002 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1011, %r1012 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1781, %r1782 }, { %r1011, %r1012 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1021, %r1022 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1775, %r1776 }, { %r1021, %r1022 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1031, %r1032 }, { %r1803, %r1804, %r1805, %r1806 }, { %r1777, %r1778 }, { %r1031, %r1032 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1041, %r1042 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1787, %r1788 }, { %r1041, %r1042 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1051, %r1052 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1789, %r1790 }, { %r1051, %r1052 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1061, %r1062 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1783, %r1784 }, { %r1061, %r1062 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1071, %r1072 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1785, %r1786 }, { %r1071, %r1072 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1081, %r1082 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1779, %r1780 }, { %r1081, %r1082 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1091, %r1092 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1781, %r1782 }, { %r1091, %r1092 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1101, %r1102 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1775, %r1776 }, { %r1101, %r1102 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1111, %r1112 }, { %r1799, %r1800, %r1801, %r1802 }, { %r1777, %r1778 }, { %r1111, %r1112 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1121, %r1122 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1787, %r1788 }, { %r1121, %r1122 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1131, %r1132 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1789, %r1790 }, { %r1131, %r1132 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1141, %r1142 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1783, %r1784 }, { %r1141, %r1142 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1151, %r1152 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1785, %r1786 }, { %r1151, %r1152 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1161, %r1162 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1779, %r1780 }, { %r1161, %r1162 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1171, %r1172 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1781, %r1782 }, { %r1171, %r1172 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1181, %r1182 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1775, %r1776 }, { %r1181, %r1182 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1191, %r1192 }, { %r1795, %r1796, %r1797, %r1798 }, { %r1777, %r1778 }, { %r1191, %r1192 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1201, %r1202 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1787, %r1788 }, { %r1201, %r1202 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1211, %r1212 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1789, %r1790 }, { %r1211, %r1212 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1221, %r1222 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1783, %r1784 }, { %r1221, %r1222 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1231, %r1232 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1785, %r1786 }, { %r1231, %r1232 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1241, %r1242 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1779, %r1780 }, { %r1241, %r1242 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1251, %r1252 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1781, %r1782 }, { %r1251, %r1252 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1261, %r1262 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1775, %r1776 }, { %r1261, %r1262 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1271, %r1272 }, { %r1791, %r1792, %r1793, %r1794 }, { %r1777, %r1778 }, { %r1271, %r1272 };
	// end inline asm
	.loc	1 102 18
	add.s64 	%rd109, %rd51, %rd131;
	.loc	1 103 18
	add.s64 	%rd110, %rd52, %rd131;
	add.s64 	%rd111, %rd132, %rd27;
	add.s64 	%rd112, %rd132, %rd26;
	add.s64 	%rd113, %rd132, %rd25;
	.loc	1 93 22
	add.s64 	%rd114, %rd132, %rd24;
	add.s32 	%r1354, %r1810, 1;
	setp.lt.s32 	%p142, %r1354, 2;
	selp.b32 	%r1810, %r1354, 0, %p142;
	.loc	1 96 53
	add.s32 	%r1355, %r1773, -16;
	.loc	1 96 72
	setp.lt.s32 	%p143, %r1355, %r201;
	setp.lt.s32 	%p144, %r1773, %r201;
	.loc	1 96 20
	shl.b32 	%r1356, %r1810, 13;
	add.s32 	%r1358, %r493, %r1356;
	bar.sync 	0;
	add.s32 	%r909, %r1358, %r492;
	add.s32 	%r911, %r1358, %r495;
	selp.b32 	%r1361, 16, 0, %p143;
	selp.b32 	%r910, %r1361, 0, %p141;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r909 + 0 ], [ %rd109 + 0 ], 0x10, %r910;
	// end inline asm
	selp.b32 	%r1362, 16, 0, %p144;
	selp.b32 	%r912, %r1362, 0, %p141;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r911 + 0 ], [ %rd110 + 0 ], 0x10, %r912;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 97 72
	setp.lt.s32 	%p145, %r1774, %r201;
	.loc	1 97 20
	shl.b32 	%r1363, %r1810, 14;
	add.s32 	%r1365, %r501, %r1363;
	add.s32 	%r913, %r1365, %r500;
	add.s32 	%r915, %r1365, %r503;
	add.s32 	%r917, %r1365, %r505;
	add.s32 	%r919, %r1365, %r507;
	selp.b32 	%r1370, 16, 0, %p145;
	selp.b32 	%r916, %r1370, 0, %p141;
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r913 + 0 ], [ %rd111 + 0 ], 0x10, %r916;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r915 + 0 ], [ %rd112 + 0 ], 0x10, %r916;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r917 + 0 ], [ %rd113 + 0 ], 0x10, %r916;
	// end inline asm
	// begin inline asm
	@%p97 cp.async.cg.shared.global [ %r919 + 0 ], [ %rd114 + 0 ], 0x10, %r916;
	// end inline asm
	// begin inline asm
	cp.async.commit_group ;
	// end inline asm
	.loc	1 93 22
	add.s32 	%r1371, %r1809, 1;
	setp.lt.s32 	%p146, %r1371, 2;
	selp.b32 	%r1809, %r1371, 0, %p146;
	.loc	1 96 20
	shl.b32 	%r1372, %r1809, 13;
	add.s32 	%r1808, %r493, %r1372;
	// begin inline asm
	cp.async.wait_group 0x2;
	// end inline asm
	bar.sync 	0;
	.loc	1 97 20
	shl.b32 	%r1373, %r1809, 14;
	add.s32 	%r1807, %r501, %r1373;
	.loc	1 96 20
	add.s32 	%r925, %r1808, %r523;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1803, %r1804, %r1805, %r1806 }, [ %r925 + 0 ];
	// end inline asm
	add.s32 	%r930, %r1808, %r527;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1799, %r1800, %r1801, %r1802 }, [ %r930 + 0 ];
	// end inline asm
	add.s32 	%r935, %r1808, %r531;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1795, %r1796, %r1797, %r1798 }, [ %r935 + 0 ];
	// end inline asm
	add.s32 	%r940, %r1808, %r535;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.trans.shared.b16 { %r1791, %r1792, %r1793, %r1794 }, [ %r940 + 0 ];
	// end inline asm
	.loc	1 97 20
	add.s32 	%r945, %r1807, %r541;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1787, %r1788, %r1789, %r1790 }, [ %r945 + 0 ];
	// end inline asm
	add.s32 	%r950, %r945, 4096;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1783, %r1784, %r1785, %r1786 }, [ %r950 + 0 ];
	// end inline asm
	add.s32 	%r955, %r945, 8192;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1779, %r1780, %r1781, %r1782 }, [ %r955 + 0 ];
	// end inline asm
	add.s32 	%r960, %r945, 12288;
	// begin inline asm
	ldmatrix.sync.aligned.m8n8.x4.shared.b16 { %r1775, %r1776, %r1777, %r1778 }, [ %r960 + 0 ];
	// end inline asm
	.loc	1 100 35
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r961, %r962 }, { %r965, %r966, %r967, %r968 }, { %r969, %r970 }, { %r961, %r962 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r971, %r972 }, { %r965, %r966, %r967, %r968 }, { %r979, %r980 }, { %r971, %r972 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r981, %r982 }, { %r965, %r966, %r967, %r968 }, { %r989, %r990 }, { %r981, %r982 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r991, %r992 }, { %r965, %r966, %r967, %r968 }, { %r999, %r1000 }, { %r991, %r992 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1001, %r1002 }, { %r965, %r966, %r967, %r968 }, { %r1009, %r1010 }, { %r1001, %r1002 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1011, %r1012 }, { %r965, %r966, %r967, %r968 }, { %r1019, %r1020 }, { %r1011, %r1012 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1021, %r1022 }, { %r965, %r966, %r967, %r968 }, { %r1029, %r1030 }, { %r1021, %r1022 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1031, %r1032 }, { %r965, %r966, %r967, %r968 }, { %r1039, %r1040 }, { %r1031, %r1032 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1041, %r1042 }, { %r1045, %r1046, %r1047, %r1048 }, { %r969, %r970 }, { %r1041, %r1042 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1051, %r1052 }, { %r1045, %r1046, %r1047, %r1048 }, { %r979, %r980 }, { %r1051, %r1052 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1061, %r1062 }, { %r1045, %r1046, %r1047, %r1048 }, { %r989, %r990 }, { %r1061, %r1062 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1071, %r1072 }, { %r1045, %r1046, %r1047, %r1048 }, { %r999, %r1000 }, { %r1071, %r1072 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1081, %r1082 }, { %r1045, %r1046, %r1047, %r1048 }, { %r1009, %r1010 }, { %r1081, %r1082 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1091, %r1092 }, { %r1045, %r1046, %r1047, %r1048 }, { %r1019, %r1020 }, { %r1091, %r1092 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1101, %r1102 }, { %r1045, %r1046, %r1047, %r1048 }, { %r1029, %r1030 }, { %r1101, %r1102 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1111, %r1112 }, { %r1045, %r1046, %r1047, %r1048 }, { %r1039, %r1040 }, { %r1111, %r1112 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1121, %r1122 }, { %r1125, %r1126, %r1127, %r1128 }, { %r969, %r970 }, { %r1121, %r1122 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1131, %r1132 }, { %r1125, %r1126, %r1127, %r1128 }, { %r979, %r980 }, { %r1131, %r1132 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1141, %r1142 }, { %r1125, %r1126, %r1127, %r1128 }, { %r989, %r990 }, { %r1141, %r1142 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1151, %r1152 }, { %r1125, %r1126, %r1127, %r1128 }, { %r999, %r1000 }, { %r1151, %r1152 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1161, %r1162 }, { %r1125, %r1126, %r1127, %r1128 }, { %r1009, %r1010 }, { %r1161, %r1162 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1171, %r1172 }, { %r1125, %r1126, %r1127, %r1128 }, { %r1019, %r1020 }, { %r1171, %r1172 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1181, %r1182 }, { %r1125, %r1126, %r1127, %r1128 }, { %r1029, %r1030 }, { %r1181, %r1182 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1191, %r1192 }, { %r1125, %r1126, %r1127, %r1128 }, { %r1039, %r1040 }, { %r1191, %r1192 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1201, %r1202 }, { %r1205, %r1206, %r1207, %r1208 }, { %r969, %r970 }, { %r1201, %r1202 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1211, %r1212 }, { %r1205, %r1206, %r1207, %r1208 }, { %r979, %r980 }, { %r1211, %r1212 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1221, %r1222 }, { %r1205, %r1206, %r1207, %r1208 }, { %r989, %r990 }, { %r1221, %r1222 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1231, %r1232 }, { %r1205, %r1206, %r1207, %r1208 }, { %r999, %r1000 }, { %r1231, %r1232 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1241, %r1242 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1009, %r1010 }, { %r1241, %r1242 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1251, %r1252 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1019, %r1020 }, { %r1251, %r1252 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1261, %r1262 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1029, %r1030 }, { %r1261, %r1262 };
	// end inline asm
	// begin inline asm
	mma.sync.aligned.m16n8k16.row.col.f16.f16.f16.f16 { %r1271, %r1272 }, { %r1205, %r1206, %r1207, %r1208 }, { %r1039, %r1040 }, { %r1271, %r1272 };
	// end inline asm
	mov.b32 	{%rs515, %rs516}, %r961;
	mov.b32 	{%rs517, %rs518}, %r962;
	mov.b32 	{%rs519, %rs520}, %r971;
	mov.b32 	{%rs521, %rs522}, %r972;
	mov.b32 	{%rs523, %rs524}, %r981;
	mov.b32 	{%rs525, %rs526}, %r982;
	mov.b32 	{%rs527, %rs528}, %r991;
	mov.b32 	{%rs529, %rs530}, %r992;
	mov.b32 	{%rs531, %rs532}, %r1001;
	mov.b32 	{%rs533, %rs534}, %r1002;
	mov.b32 	{%rs535, %rs536}, %r1011;
	mov.b32 	{%rs537, %rs538}, %r1012;
	mov.b32 	{%rs539, %rs540}, %r1021;
	mov.b32 	{%rs541, %rs542}, %r1022;
	mov.b32 	{%rs543, %rs544}, %r1031;
	mov.b32 	{%rs545, %rs546}, %r1032;
	mov.b32 	{%rs547, %rs548}, %r1041;
	mov.b32 	{%rs549, %rs550}, %r1042;
	mov.b32 	{%rs551, %rs552}, %r1051;
	mov.b32 	{%rs553, %rs554}, %r1052;
	mov.b32 	{%rs555, %rs556}, %r1061;
	mov.b32 	{%rs557, %rs558}, %r1062;
	mov.b32 	{%rs559, %rs560}, %r1071;
	mov.b32 	{%rs561, %rs562}, %r1072;
	mov.b32 	{%rs563, %rs564}, %r1081;
	mov.b32 	{%rs565, %rs566}, %r1082;
	mov.b32 	{%rs567, %rs568}, %r1091;
	mov.b32 	{%rs569, %rs570}, %r1092;
	mov.b32 	{%rs571, %rs572}, %r1101;
	mov.b32 	{%rs573, %rs574}, %r1102;
	mov.b32 	{%rs575, %rs576}, %r1111;
	mov.b32 	{%rs577, %rs578}, %r1112;
	mov.b32 	{%rs579, %rs580}, %r1121;
	mov.b32 	{%rs581, %rs582}, %r1122;
	mov.b32 	{%rs583, %rs584}, %r1131;
	mov.b32 	{%rs585, %rs586}, %r1132;
	mov.b32 	{%rs587, %rs588}, %r1141;
	mov.b32 	{%rs589, %rs590}, %r1142;
	mov.b32 	{%rs591, %rs592}, %r1151;
	mov.b32 	{%rs593, %rs594}, %r1152;
	mov.b32 	{%rs595, %rs596}, %r1161;
	mov.b32 	{%rs597, %rs598}, %r1162;
	mov.b32 	{%rs599, %rs600}, %r1171;
	mov.b32 	{%rs601, %rs602}, %r1172;
	mov.b32 	{%rs603, %rs604}, %r1181;
	mov.b32 	{%rs605, %rs606}, %r1182;
	mov.b32 	{%rs607, %rs608}, %r1191;
	mov.b32 	{%rs609, %rs610}, %r1192;
	mov.b32 	{%rs611, %rs612}, %r1201;
	mov.b32 	{%rs613, %rs614}, %r1202;
	mov.b32 	{%rs615, %rs616}, %r1211;
	mov.b32 	{%rs617, %rs618}, %r1212;
	mov.b32 	{%rs619, %rs620}, %r1221;
	mov.b32 	{%rs621, %rs622}, %r1222;
	mov.b32 	{%rs623, %rs624}, %r1231;
	mov.b32 	{%rs625, %rs626}, %r1232;
	mov.b32 	{%rs627, %rs628}, %r1241;
	mov.b32 	{%rs629, %rs630}, %r1242;
	mov.b32 	{%rs631, %rs632}, %r1251;
	mov.b32 	{%rs633, %rs634}, %r1252;
	mov.b32 	{%rs635, %rs636}, %r1261;
	mov.b32 	{%rs637, %rs638}, %r1262;
	mov.b32 	{%rs639, %rs640}, %r1271;
	mov.b32 	{%rs641, %rs642}, %r1272;
	.loc	1 93 22
	add.s32 	%r1811, %r1811, 1;
	add.s64 	%rd132, %rd132, 64;
	add.s64 	%rd131, %rd131, %rd29;
	add.s32 	%r1774, %r1774, 32;
	add.s32 	%r1773, %r1773, 32;
	setp.lt.s32 	%p147, %r1811, %r70;
	@%p147 bra 	$L__BB0_2;
$L__BB0_3:
	// begin inline asm
	cp.async.wait_group 0x0;
	// end inline asm
	bar.sync 	0;
	shr.u32 	%r1567, %r2, 2;
	shl.b32 	%r1568, %r1, 1;
	and.b32  	%r1569, %r1568, 6;
	shl.b32 	%r1570, %r77, 4;
	or.b32  	%r1571, %r1570, %r1567;
	or.b32  	%r1572, %r100, %r1569;
	mad.lo.s32 	%r1573, %r1571, 264, %r1572;
	shl.b32 	%r1574, %r1573, 1;
	add.s32 	%r1576, %r493, %r1574;
	mov.b32 	%r1577, {%rs515, %rs516};
	st.shared.b32 	[%r1576], %r1577;
	mov.b32 	%r1578, {%rs517, %rs518};
	st.shared.b32 	[%r1576+4224], %r1578;
	mov.b32 	%r1579, {%rs519, %rs520};
	st.shared.b32 	[%r1576+64], %r1579;
	mov.b32 	%r1580, {%rs521, %rs522};
	st.shared.b32 	[%r1576+4288], %r1580;
	mov.b32 	%r1581, {%rs523, %rs524};
	st.shared.b32 	[%r1576+128], %r1581;
	mov.b32 	%r1582, {%rs525, %rs526};
	st.shared.b32 	[%r1576+4352], %r1582;
	mov.b32 	%r1583, {%rs527, %rs528};
	st.shared.b32 	[%r1576+192], %r1583;
	mov.b32 	%r1584, {%rs529, %rs530};
	st.shared.b32 	[%r1576+4416], %r1584;
	mov.b32 	%r1585, {%rs531, %rs532};
	st.shared.b32 	[%r1576+256], %r1585;
	mov.b32 	%r1586, {%rs533, %rs534};
	st.shared.b32 	[%r1576+4480], %r1586;
	mov.b32 	%r1587, {%rs535, %rs536};
	st.shared.b32 	[%r1576+320], %r1587;
	mov.b32 	%r1588, {%rs537, %rs538};
	st.shared.b32 	[%r1576+4544], %r1588;
	mov.b32 	%r1589, {%rs539, %rs540};
	st.shared.b32 	[%r1576+384], %r1589;
	mov.b32 	%r1590, {%rs541, %rs542};
	st.shared.b32 	[%r1576+4608], %r1590;
	mov.b32 	%r1591, {%rs543, %rs544};
	st.shared.b32 	[%r1576+448], %r1591;
	mov.b32 	%r1592, {%rs545, %rs546};
	st.shared.b32 	[%r1576+4672], %r1592;
	bar.sync 	0;
	shl.b32 	%r1593, %r2, 3;
	mad.lo.s32 	%r1594, %r4, 264, %r1593;
	shl.b32 	%r1595, %r1594, 1;
	add.s32 	%r1596, %r493, %r1595;
	mov.b32 	%r1597, {%rs547, %rs548};
	mov.b32 	%r1598, {%rs549, %rs550};
	mov.b32 	%r1599, {%rs551, %rs552};
	mov.b32 	%r1600, {%rs553, %rs554};
	mov.b32 	%r1601, {%rs555, %rs556};
	mov.b32 	%r1602, {%rs557, %rs558};
	mov.b32 	%r1603, {%rs559, %rs560};
	mov.b32 	%r1604, {%rs561, %rs562};
	mov.b32 	%r1605, {%rs563, %rs564};
	mov.b32 	%r1606, {%rs565, %rs566};
	mov.b32 	%r1607, {%rs567, %rs568};
	mov.b32 	%r1608, {%rs569, %rs570};
	mov.b32 	%r1609, {%rs571, %rs572};
	mov.b32 	%r1610, {%rs573, %rs574};
	mov.b32 	%r1611, {%rs575, %rs576};
	mov.b32 	%r1612, {%rs577, %rs578};
	mov.b32 	%r1613, {%rs579, %rs580};
	mov.b32 	%r1614, {%rs581, %rs582};
	mov.b32 	%r1615, {%rs583, %rs584};
	mov.b32 	%r1616, {%rs585, %rs586};
	mov.b32 	%r1617, {%rs587, %rs588};
	mov.b32 	%r1618, {%rs589, %rs590};
	mov.b32 	%r1619, {%rs591, %rs592};
	mov.b32 	%r1620, {%rs593, %rs594};
	mov.b32 	%r1621, {%rs595, %rs596};
	mov.b32 	%r1622, {%rs597, %rs598};
	mov.b32 	%r1623, {%rs599, %rs600};
	mov.b32 	%r1624, {%rs601, %rs602};
	mov.b32 	%r1625, {%rs603, %rs604};
	mov.b32 	%r1626, {%rs605, %rs606};
	mov.b32 	%r1627, {%rs607, %rs608};
	mov.b32 	%r1628, {%rs609, %rs610};
	mov.b32 	%r1629, {%rs611, %rs612};
	mov.b32 	%r1630, {%rs613, %rs614};
	mov.b32 	%r1631, {%rs615, %rs616};
	mov.b32 	%r1632, {%rs617, %rs618};
	mov.b32 	%r1633, {%rs619, %rs620};
	mov.b32 	%r1634, {%rs621, %rs622};
	mov.b32 	%r1635, {%rs623, %rs624};
	mov.b32 	%r1636, {%rs625, %rs626};
	mov.b32 	%r1637, {%rs627, %rs628};
	mov.b32 	%r1638, {%rs629, %rs630};
	mov.b32 	%r1639, {%rs631, %rs632};
	mov.b32 	%r1640, {%rs633, %rs634};
	mov.b32 	%r1641, {%rs635, %rs636};
	mov.b32 	%r1642, {%rs637, %rs638};
	mov.b32 	%r1643, {%rs639, %rs640};
	mov.b32 	%r1644, {%rs641, %rs642};
	ld.shared.v4.b32 	{%r1645, %r1646, %r1647, %r1648}, [%r1596];
	.loc	1 127 23
	add.f16x2 	%r1649, %r1645, %r203;
	add.f16x2 	%r1650, %r1646, %r204;
	add.f16x2 	%r1651, %r1647, %r205;
	add.f16x2 	%r1652, %r1648, %r206;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1653, %r1654, %r1655, %r1656}, [%r1596+4224];
	.loc	1 127 23
	add.f16x2 	%r1657, %r1653, %r211;
	add.f16x2 	%r1658, %r1654, %r212;
	add.f16x2 	%r1659, %r1655, %r213;
	add.f16x2 	%r1660, %r1656, %r214;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1661, %r1662, %r1663, %r1664}, [%r1596+8448];
	.loc	1 127 23
	add.f16x2 	%r1665, %r1661, %r219;
	add.f16x2 	%r1666, %r1662, %r220;
	add.f16x2 	%r1667, %r1663, %r221;
	add.f16x2 	%r1668, %r1664, %r222;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1669, %r1670, %r1671, %r1672}, [%r1596+12672];
	.loc	1 127 23
	add.f16x2 	%r1673, %r1669, %r227;
	add.f16x2 	%r1674, %r1670, %r228;
	add.f16x2 	%r1675, %r1671, %r229;
	.loc	1 93 22
	bar.sync 	0;
	st.shared.b32 	[%r1576], %r1597;
	st.shared.b32 	[%r1576+4224], %r1598;
	st.shared.b32 	[%r1576+64], %r1599;
	st.shared.b32 	[%r1576+4288], %r1600;
	st.shared.b32 	[%r1576+128], %r1601;
	st.shared.b32 	[%r1576+4352], %r1602;
	st.shared.b32 	[%r1576+192], %r1603;
	st.shared.b32 	[%r1576+4416], %r1604;
	st.shared.b32 	[%r1576+256], %r1605;
	st.shared.b32 	[%r1576+4480], %r1606;
	st.shared.b32 	[%r1576+320], %r1607;
	st.shared.b32 	[%r1576+4544], %r1608;
	st.shared.b32 	[%r1576+384], %r1609;
	st.shared.b32 	[%r1576+4608], %r1610;
	st.shared.b32 	[%r1576+448], %r1611;
	st.shared.b32 	[%r1576+4672], %r1612;
	bar.sync 	0;
	.loc	1 127 23
	add.f16x2 	%r1676, %r1672, %r230;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1677, %r1678, %r1679, %r1680}, [%r1596];
	.loc	1 127 23
	add.f16x2 	%r1681, %r1677, %r235;
	add.f16x2 	%r1682, %r1678, %r236;
	add.f16x2 	%r1683, %r1679, %r237;
	add.f16x2 	%r1684, %r1680, %r238;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1685, %r1686, %r1687, %r1688}, [%r1596+4224];
	.loc	1 127 23
	add.f16x2 	%r1689, %r1685, %r243;
	add.f16x2 	%r1690, %r1686, %r244;
	add.f16x2 	%r1691, %r1687, %r245;
	add.f16x2 	%r1692, %r1688, %r246;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1693, %r1694, %r1695, %r1696}, [%r1596+8448];
	.loc	1 127 23
	add.f16x2 	%r1697, %r1693, %r251;
	add.f16x2 	%r1698, %r1694, %r252;
	add.f16x2 	%r1699, %r1695, %r253;
	add.f16x2 	%r1700, %r1696, %r254;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1701, %r1702, %r1703, %r1704}, [%r1596+12672];
	.loc	1 127 23
	add.f16x2 	%r1705, %r1701, %r259;
	add.f16x2 	%r1706, %r1702, %r260;
	add.f16x2 	%r1707, %r1703, %r261;
	.loc	1 93 22
	bar.sync 	0;
	st.shared.b32 	[%r1576], %r1613;
	st.shared.b32 	[%r1576+4224], %r1614;
	st.shared.b32 	[%r1576+64], %r1615;
	st.shared.b32 	[%r1576+4288], %r1616;
	st.shared.b32 	[%r1576+128], %r1617;
	st.shared.b32 	[%r1576+4352], %r1618;
	st.shared.b32 	[%r1576+192], %r1619;
	st.shared.b32 	[%r1576+4416], %r1620;
	st.shared.b32 	[%r1576+256], %r1621;
	st.shared.b32 	[%r1576+4480], %r1622;
	st.shared.b32 	[%r1576+320], %r1623;
	st.shared.b32 	[%r1576+4544], %r1624;
	st.shared.b32 	[%r1576+384], %r1625;
	st.shared.b32 	[%r1576+4608], %r1626;
	st.shared.b32 	[%r1576+448], %r1627;
	st.shared.b32 	[%r1576+4672], %r1628;
	bar.sync 	0;
	.loc	1 127 23
	add.f16x2 	%r1708, %r1704, %r262;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1709, %r1710, %r1711, %r1712}, [%r1596];
	.loc	1 127 23
	add.f16x2 	%r1713, %r1709, %r267;
	add.f16x2 	%r1714, %r1710, %r268;
	add.f16x2 	%r1715, %r1711, %r269;
	add.f16x2 	%r1716, %r1712, %r270;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1717, %r1718, %r1719, %r1720}, [%r1596+4224];
	.loc	1 127 23
	add.f16x2 	%r1721, %r1717, %r275;
	add.f16x2 	%r1722, %r1718, %r276;
	add.f16x2 	%r1723, %r1719, %r277;
	add.f16x2 	%r1724, %r1720, %r278;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1725, %r1726, %r1727, %r1728}, [%r1596+8448];
	.loc	1 127 23
	add.f16x2 	%r1729, %r1725, %r283;
	add.f16x2 	%r1730, %r1726, %r284;
	add.f16x2 	%r1731, %r1727, %r285;
	add.f16x2 	%r1732, %r1728, %r286;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1733, %r1734, %r1735, %r1736}, [%r1596+12672];
	.loc	1 127 23
	add.f16x2 	%r1737, %r1733, %r291;
	add.f16x2 	%r1738, %r1734, %r292;
	add.f16x2 	%r1739, %r1735, %r293;
	.loc	1 93 22
	bar.sync 	0;
	st.shared.b32 	[%r1576], %r1629;
	st.shared.b32 	[%r1576+4224], %r1630;
	st.shared.b32 	[%r1576+64], %r1631;
	st.shared.b32 	[%r1576+4288], %r1632;
	st.shared.b32 	[%r1576+128], %r1633;
	st.shared.b32 	[%r1576+4352], %r1634;
	st.shared.b32 	[%r1576+192], %r1635;
	st.shared.b32 	[%r1576+4416], %r1636;
	st.shared.b32 	[%r1576+256], %r1637;
	st.shared.b32 	[%r1576+4480], %r1638;
	st.shared.b32 	[%r1576+320], %r1639;
	st.shared.b32 	[%r1576+4544], %r1640;
	st.shared.b32 	[%r1576+384], %r1641;
	st.shared.b32 	[%r1576+4608], %r1642;
	st.shared.b32 	[%r1576+448], %r1643;
	st.shared.b32 	[%r1576+4672], %r1644;
	bar.sync 	0;
	.loc	1 127 23
	add.f16x2 	%r1740, %r1736, %r294;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1741, %r1742, %r1743, %r1744}, [%r1596];
	.loc	1 127 23
	add.f16x2 	%r1745, %r1741, %r299;
	add.f16x2 	%r1746, %r1742, %r300;
	add.f16x2 	%r1747, %r1743, %r301;
	add.f16x2 	%r1748, %r1744, %r302;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1749, %r1750, %r1751, %r1752}, [%r1596+4224];
	.loc	1 127 23
	add.f16x2 	%r1753, %r1749, %r307;
	add.f16x2 	%r1754, %r1750, %r308;
	add.f16x2 	%r1755, %r1751, %r309;
	add.f16x2 	%r1756, %r1752, %r310;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1757, %r1758, %r1759, %r1760}, [%r1596+8448];
	.loc	1 127 23
	add.f16x2 	%r1761, %r1757, %r315;
	add.f16x2 	%r1762, %r1758, %r316;
	add.f16x2 	%r1763, %r1759, %r317;
	add.f16x2 	%r1764, %r1760, %r318;
	.loc	1 93 22
	ld.shared.v4.b32 	{%r1765, %r1766, %r1767, %r1768}, [%r1596+12672];
	.loc	1 127 23
	add.f16x2 	%r1769, %r1765, %r323;
	add.f16x2 	%r1770, %r1766, %r324;
	add.f16x2 	%r1771, %r1767, %r325;
	add.f16x2 	%r1772, %r1768, %r326;
	.loc	1 129 21
	// begin inline asm
	@%p148 st.global.v4.b32 [ %rd115 + 0 ], { %r1649, %r1650, %r1651, %r1652 };
	// end inline asm
	// begin inline asm
	@%p149 st.global.v4.b32 [ %rd116 + 0 ], { %r1657, %r1658, %r1659, %r1660 };
	// end inline asm
	// begin inline asm
	@%p150 st.global.v4.b32 [ %rd117 + 0 ], { %r1665, %r1666, %r1667, %r1668 };
	// end inline asm
	// begin inline asm
	@%p151 st.global.v4.b32 [ %rd118 + 0 ], { %r1673, %r1674, %r1675, %r1676 };
	// end inline asm
	// begin inline asm
	@%p152 st.global.v4.b32 [ %rd119 + 0 ], { %r1681, %r1682, %r1683, %r1684 };
	// end inline asm
	// begin inline asm
	@%p153 st.global.v4.b32 [ %rd120 + 0 ], { %r1689, %r1690, %r1691, %r1692 };
	// end inline asm
	// begin inline asm
	@%p154 st.global.v4.b32 [ %rd121 + 0 ], { %r1697, %r1698, %r1699, %r1700 };
	// end inline asm
	// begin inline asm
	@%p155 st.global.v4.b32 [ %rd122 + 0 ], { %r1705, %r1706, %r1707, %r1708 };
	// end inline asm
	// begin inline asm
	@%p156 st.global.v4.b32 [ %rd123 + 0 ], { %r1713, %r1714, %r1715, %r1716 };
	// end inline asm
	// begin inline asm
	@%p157 st.global.v4.b32 [ %rd124 + 0 ], { %r1721, %r1722, %r1723, %r1724 };
	// end inline asm
	// begin inline asm
	@%p158 st.global.v4.b32 [ %rd125 + 0 ], { %r1729, %r1730, %r1731, %r1732 };
	// end inline asm
	// begin inline asm
	@%p159 st.global.v4.b32 [ %rd126 + 0 ], { %r1737, %r1738, %r1739, %r1740 };
	// end inline asm
	// begin inline asm
	@%p160 st.global.v4.b32 [ %rd127 + 0 ], { %r1745, %r1746, %r1747, %r1748 };
	// end inline asm
	// begin inline asm
	@%p161 st.global.v4.b32 [ %rd128 + 0 ], { %r1753, %r1754, %r1755, %r1756 };
	// end inline asm
	// begin inline asm
	@%p162 st.global.v4.b32 [ %rd129 + 0 ], { %r1761, %r1762, %r1763, %r1764 };
	// end inline asm
	// begin inline asm
	@%p163 st.global.v4.b32 [ %rd130 + 0 ], { %r1769, %r1770, %r1771, %r1772 };
	// end inline asm
	.loc	1 129 4
	ret;
$L__tmp6:
$L__func_end0:

}
	.file	1 "/home/mike/PycharmProjects/tritontest/compile_matmul_kernel_accumulate_transpose_a_transpose_b.py"
	.file	2 "/home/mike/PycharmProjects/tritontest/.venv/lib/python3.11/site-packages/triton/language/standard.py"
	.section	.debug_abbrev
	{
.b8 1
.b8 17
.b8 1
.b8 37
.b8 8
.b8 19
.b8 5
.b8 3
.b8 8
.b8 16
.b8 6
.b8 27
.b8 8
.b8 17
.b8 1
.b8 18
.b8 1
.b8 0
.b8 0
.b8 2
.b8 46
.b8 0
.b8 3
.b8 8
.b8 32
.b8 11
.b8 0
.b8 0
.b8 3
.b8 46
.b8 1
.b8 17
.b8 1
.b8 18
.b8 1
.b8 49
.b8 19
.b8 0
.b8 0
.b8 4
.b8 29
.b8 0
.b8 49
.b8 19
.b8 17
.b8 1
.b8 18
.b8 1
.b8 88
.b8 11
.b8 89
.b8 11
.b8 87
.b8 11
.b8 0
.b8 0
.b8 0
	}
	.section	.debug_info
	{
.b32 211
.b8 2
.b8 0
.b32 .debug_abbrev
.b8 8
.b8 1
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 0
.b8 2
.b8 0
.b8 99
.b8 111
.b8 109
.b8 112
.b8 105
.b8 108
.b8 101
.b8 95
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 46
.b8 112
.b8 121
.b8 0
.b32 .debug_line
.b8 47
.b8 104
.b8 111
.b8 109
.b8 101
.b8 47
.b8 109
.b8 105
.b8 107
.b8 101
.b8 47
.b8 80
.b8 121
.b8 99
.b8 104
.b8 97
.b8 114
.b8 109
.b8 80
.b8 114
.b8 111
.b8 106
.b8 101
.b8 99
.b8 116
.b8 115
.b8 47
.b8 116
.b8 114
.b8 105
.b8 116
.b8 111
.b8 110
.b8 116
.b8 101
.b8 115
.b8 116
.b8 0
.b64 $L__func_begin0
.b64 $L__func_end0
.b8 2
.b8 109
.b8 97
.b8 116
.b8 109
.b8 117
.b8 108
.b8 95
.b8 107
.b8 101
.b8 114
.b8 110
.b8 101
.b8 108
.b8 0
.b8 1
.b8 3
.b64 $L__func_begin0
.b64 $L__func_end0
.b32 104
.b8 4
.b32 104
.b64 $L__tmp1
.b64 $L__tmp2
.b8 1
.b8 58
.b8 27
.b8 4
.b32 104
.b64 $L__tmp2
.b64 $L__tmp3
.b8 1
.b8 59
.b8 27
.b8 4
.b32 104
.b64 $L__tmp4
.b64 $L__tmp5
.b8 1
.b8 93
.b8 33
.b8 0
.b8 0
	}
	.section	.debug_loc	{	}
)";

#define TRITON_MATMUL_KERNEL_7_SHARED_MEMORY_SIZE 49152
#define TRITON_MATMUL_KERNEL_7_BLOCK_SIZE_M 128
#define TRITON_MATMUL_KERNEL_7_BLOCK_SIZE_N 256
#define TRITON_MATMUL_KERNEL_7_NUM_WARPS 8
#define TRITON_MATMUL_KERNEL_7_FUNCTION_NAME "matmul_kernel_accumulate_transpose_a_transpose_b"
